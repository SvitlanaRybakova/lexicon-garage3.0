using lexicon_garage3.Core.Entities;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;

namespace lexicon_garage3.Persistance.Data
{
    public class ApplicationDbContext : IdentityDbContext<Member, IdentityRole, string>
    {
        public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options)
            : base(options)
        {
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Entity<Vehicle>()
                .HasKey(t => t.RegNumber);

            modelBuilder.Entity<Vehicle>()
                .HasOne(v => v.Member)           // Vehicle has one Member
                .WithMany(m => m.Vehicles)       // Member has many Vehicles
                .HasForeignKey(v => v.MemberId)  // FK is IdentityUser's Id
                .OnDelete(DeleteBehavior.Cascade); // Enable cascade delete

            // generated by chatGPT
            // The Principal Side: Vehicle is the principal.The Dependent Side: ParkingSpot is the dependent and holds the foreign key(RegNumber)
            modelBuilder.Entity<ParkingSpot>()
             .HasOne(p => p.Vehicle)
             .WithOne(v => v.ParkingSpot)
             .HasForeignKey<ParkingSpot>(p => p.RegNumber)
             .IsRequired(false); // Make the foreign key optional

            //vehicletype stores the enum name ("Small", "Medium", "Large") as a string
            modelBuilder.Entity<VehicleType>()
           .Property(v => v.VehicleSize)
           .HasConversion<string>();
        }
        public DbSet<Member> Member { get; set; } = default!;
        public DbSet<ParkingSpot> ParkingSpot { get; set; } = default!;
        public DbSet<Vehicle> Vehicle { get; set; } = default!;
        public DbSet<VehicleType> VehicleType { get; set; } = default!;
    }
}
